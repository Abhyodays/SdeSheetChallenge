/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>>ans;
        if(root==NULL) return ans;
        map<int,vector<int>>mp; // <hd,vector>
        queue<pair<TreeNode*,int>>q;//<node,hd>
        
        q.push({root,0});
        while(!q.empty()){
             //set is used to store value in sorted order at a level.
            multiset<pair<int,int>>temp;  //<hd,val>
            int len = q.size();
            //traversing a level
            for(int i=0;i<len;i++){
                TreeNode*fNode = q.front().first;
                int hd = q.front().second;
                q.pop();
                temp.insert({hd,fNode->val});
                if(fNode->left){
                    q.push({fNode->left,hd-1});
                }
                if(fNode->right){
                    q.push({fNode->right,hd+1});
                }
            }
            //level completed;
            //storing element of set into map according their hd.
            for(auto i: temp){
                mp[i.first].push_back(i.second);
            }
        }
        //storing value key wise;
        for(auto i: mp){
            ans.push_back(i.second);
        }
        return ans;
        
    }
};

space = O(2n+2n). Time = O(n*logn)
