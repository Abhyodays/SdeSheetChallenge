method- 1

class Solution {
public:
    int height(TreeNode *root){
        if(root==NULL) return 0;
        return max(height(root->left),height(root->right))+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL) return 0;
        
        int left = diameterOfBinaryTree(root->left);
        int right = diameterOfBinaryTree(root->right);
        int h = height(root->left)+height(root->right);
        return max(max(left,right),h);
    }
};
T(N) = O(H*n), Space = O(H);

Method- 2*:

class Solution {
public:
    int getDiameter(TreeNode* root,int &diameter){
        if(root==NULL) return 0;
        
        int left = getDiameter(root->left,diameter);
        int right = getDiameter(root->right,diameter);
        diameter = max(diameter,left+right);
        return max(left,right)+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0;
        getDiameter(root,diameter);
        return diameter;
        
    }
};

T(n) = O(n), Space = O(h)
