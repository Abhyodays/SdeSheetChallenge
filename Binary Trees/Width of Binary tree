class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL) return 0;
        queue<pair<TreeNode*,long>>q;
        q.push({root,0});
        int ans = 0;
        while(!q.empty()){
            int len = q.size();
            int start,end;
            for(int i = 0 ; i<len ; i++){
                TreeNode *fNode = q.front().first;
                int index = q.front().second;
                if(i==len-1) end = index;
                if(i==0) start = index;
                q.pop();
                
                if(fNode->left){
                    q.push({fNode->left,(long)2*index+1}); // in Complete Binary tree index of left node is 2*i+1. where i is root index
                }
                if(fNode->right){
                    q.push({fNode->right,(long)2*index+2});//in Complete Binary tree index of right node is 2*i+2. where i is root index
                }
            }
            ans = max(ans,(end-start+1)); // width = end.index-start.index+1
        }
        return ans;
    }
};
