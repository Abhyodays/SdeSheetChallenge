class Solution {
public:
    int largestRectangleArea(vector<int>& arr) {
        stack<pair<int,int>>st;
        vector<int>nsl,nsr;
        int n = arr.size();
//         Finding next smaller element left for every element.
        for(int i = 0;i<n;i++){
            if(st.empty()){
                nsl.push_back(-1);
            }
            else if(arr[i]>st.top().first){
                nsl.push_back(st.top().second);
            }
            else if(arr[i]<=st.top().first){
                while(!st.empty() && arr[i]<=st.top().first){
                    st.pop();
                }
                if(st.empty()){
                    nsl.push_back(-1);
                }
                else{
                    nsl.push_back(st.top().second);
                }
            }
            st.push({arr[i],i});
        }
//         Empty the Stack.
        while(!st.empty()){
            st.pop();
        }
//         Calculate next greater index right for every element.
        for(int i = n-1;i>=0;i--){
            if(st.empty()){
                nsr.push_back(n);
            }
            else if(arr[i]>st.top().first){
                nsr.push_back(st.top().second);
            }
            else if(arr[i]<=st.top().first){
                while(!st.empty() && arr[i]<=st.top().first){
                    st.pop();
                }
                if(st.empty()){
                    nsr.push_back(n);
                }
                else{
                    nsr.push_back(st.top().second);
                }
            }
            st.push({arr[i],i});
        }
        reverse(nsr.begin(),nsr.end());
        int maxHeight = INT_MIN;
        for(int i = 0 ; i<n ; i++){
            maxHeight = max((nsr[i]-nsl[i]-1)*arr[i],maxHeight);
        }
        return maxHeight;
        
    }
};
