class Solution {
public:
//     Return Next Smaller Elements in right's indexes
    vector<int>getNsr(vector<int>&heights){
        stack<pair<int,int>>s;  //pair<heights[i],i>
        vector<int>nsr;
        int n= heights.size();
        for(int i = n-1; i>=0;i--){
            if(s.empty()){
                nsr.push_back(n);
            }
            else if(s.top().first<heights[i]){
                nsr.push_back(s.top().second);
            }
            else if(s.top().first>=heights[i]){
                while(!s.empty() && s.top().first>=heights[i]){
                    s.pop();
                }
                if(s.empty()){
                    nsr.push_back(n);
                }
                else{
                    nsr.push_back(s.top().second);
                }
                
            }
            s.push({heights[i],i});
        }
        reverse(nsr.begin(),nsr.end());
        return nsr;
    }
    
//     Return Next Smaller Elements in left's indexes
    vector<int>getNsl(vector<int>&heights){
        stack<pair<int,int>>s;  //pair<heights[i],i>
        vector<int>nsl;
        int n= heights.size();
        for(int i = 0; i<n;i++){
            if(s.empty()){
                nsl.push_back(-1);
            }
            else if(s.top().first<heights[i]){
                nsl.push_back(s.top().second);
            }
            else if(s.top().first>=heights[i]){
                while(!s.empty() && s.top().first>=heights[i]){
                    s.pop();
                }
                if(s.empty()){
                    nsl.push_back(-1);
                }
                else{
                    nsl.push_back(s.top().second);
                }
                
            }
            s.push({heights[i],i});
        }
        return nsl;
    }
    
//     Returns Largest area of rectangle coverd by row
    int largestRectangleArea(vector<int>& heights) {
        vector<int>nsl;
        vector<int>nsr;
        nsl = getNsl(heights);
        nsr = getNsr(heights);
        
        int n= heights.size();
        int ans = 0;
        for(int i=0;i<heights.size();i++){
            ans = max(ans,(nsr[i]-nsl[i]-1)*heights[i]);
        }
        return ans;
    }
    
    int maximalRectangle(vector<vector<char>>& matrix) {
        int r = matrix.size();
        int c = matrix[0].size();
        vector<vector<int>>temp(r,vector<int>(c));
//         conversion from char to int
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                temp[i][j] = matrix[i][j]-'0';
            }
        }
        
//         Adding previous rows
        for(int i=1;i<r;i++){
            for(int j=0;j<c;j++){
                if(temp[i][j]==0){
                    continue;
                }
                else{
                    temp[i][j]+=temp[i-1][j];
                }
            }
        }
        int ans = 0;
        for(auto row: temp){
            int area = largestRectangleArea(row);
            ans = max(ans,area);
        }
        
        return ans;
        
        
    }
};
