class Solution
{
    public:
    //Function to check whether a Binary Tree is BST or not.
    pair<bool,pair<int,int>> checkBST(Node *root){  //pair<isBST,<min,MAX> >
        if(root==NULL) return make_pair(true,make_pair(INT_MAX,0));
        if(root->left==NULL and root->right==NULL) return {true,{root->data,root->data}};
        
        auto left = checkBST(root->left);
        auto right = checkBST(root->right);
        int rmin = right.second.first;
        int rmax = right.second.second;
        int lmax = left.second.second;
        int lmin = left.second.first;
        bool ans = left.first && right.first && root->data<rmin && root->data>lmax;
        int maxTillNow = max(root->data,max(lmax,rmax));
        int minTillNow = min(root->data,min(lmin,rmin));
        
        return {ans,{minTillNow,maxTillNow}};
    }
    bool isBST(Node* root) 
    {
        // Your code here
        return checkBST(root).first;
    }
};

T(N) = N, Space = N
