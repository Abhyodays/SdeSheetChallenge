Dynamic Programming

class Solution{
  public:
    int minimumNumberOfDeletions(string s) { 
        // code here
        int n = s.length();
        vector<vector<int>>dp(n+1,vector<int>(n+1));
        //find length of Longest common Palindromic subsequence.
        for(int i=0;i<=n;i++) dp[i][0] = 0;
        for(int j = 0;j<=n;j++) dp[0][j] = 0;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(s[i-1]==s[n-j]){
                    dp[i][j] = dp[i-1][j-1]+1;
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        // Ans = Length of string - common palindrome.
        return n-dp[n][n];
    } 
};

Time & Space = N^2
