# return the length of LCS
method-1 Recursion
class Solution {
public:
    int solve(string text1, int n, string text2, int m){
        if(n==0 || m==0) return 0;
        
        if(text1[n-1]==text2[m-1]){
            return 1+solve(text1,n-1,text2,m-1);
        }
        else{
            return max(solve(text1,n-1,text2,m),solve(text1,n,text2,m-1));
        }
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        return solve(text1,n,text2,m);
    }
};
Time = 2^min(m,n) space = min(m,n)

method-2 Memoization

class Solution {
public:
    int solve(string text1, int n, string text2, int m, vector<vector<int>>&dp){
        if(n==0 || m==0) return 0;
        
        if(dp[n][m]!= -1) return dp[n][m];
        if(text1[n-1]==text2[m-1]){
            return dp[n][m] =  1+solve(text1,n-1,text2,m-1,dp);
        }
        else{
            return dp[n][m] =  max(solve(text1,n-1,text2,m,dp),solve(text1,n,text2,m-1,dp));
        }
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        return solve(text1,n,text2,m,dp);
    }
};
Time = n*m, space = n*m

method-3 Top Down  

    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>>dp(n+1,vector<int>(m+1));
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                if(i==0 || j==0){
                    dp[i][j] = 0;
                }
            }
        }
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(text1[i-1]==text2[j-1]){
                    dp[i][j] = 1+dp[i-1][j-1];
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        
        return dp[n][m];
    }
 Time: n*m space= n*m
