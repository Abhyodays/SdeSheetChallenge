1. Recursive Solution
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       if(n==0 || W<=0) return 0;
       
       if(wt[n-1]<=W){
           return max(val[n-1]+knapSack(W-wt[n-1],wt,val,n-1),knapSack(W,wt,val,n-1));
       }
       else if(wt[n-1]>W){
           return knapSack(W,wt,val,n-1);
       }
    }
};
 Time = 2^N , Space = N
 
2. Optimized using DP(Recursion + memoization)

class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int solve(int W, int wt[], int val[], int n, vector<vector<int>>&dp){
        if(n==0||W==0) return 0; // if weight became 0 or capacity became 0 return 0.
        if(dp[W][n] != -1) return dp[W][n]; //if this combination is already visited.
        
        if(wt[n-1]<=W){ //when current weight is less than capacity
           return dp[W][n] = max(val[n-1]+solve(W-wt[n-1],wt,val,n-1,dp),solve(W,wt,val,n-1,dp));
        }
        else if(wt[n-1]>W){ //when current weight is more than capacity
           return dp[W][n] = solve(W,wt,val,n-1,dp); 
        }
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       vector<vector<int>>dp(W+1,vector<int>(n+1,-1));//memoization memory
       return solve(W,wt,val,n,dp);
    }
};

Time: n*W , Space = n*W

method-3 Dynamic Programming(Top Down)

class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       vector<vector<int>>dp(n+1,vector<int>(W+1));
       
       for(int i=0;i<=n;i++){
           for(int j=0; j<=W;j++){
               //Base condition.
               if(i==0 || j==0){
                   dp[i][j] = 0;
               }
               //Recursive 2-a
               else if(wt[i-1]<=j){
                   dp[i][j] = max((val[i-1]+
                              dp[i-1][j-wt[i-1]]),dp[i-1][j]);
               }
               //recursive 2-b
               else{
                   dp[i][j] = dp[i-1][j];
               }
           } 
       }
       return dp[n][W];
    }
};
Time = n*W, Space = n*W

