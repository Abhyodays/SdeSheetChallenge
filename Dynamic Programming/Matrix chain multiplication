Recursion
 
class Solution{
public:
    int solve(int arr[] , int i, int j){
        if(i>=j) return 0;
        int ans = INT_MAX;
        for(int k=i; k<=j-1;k++){
          int tempans = solve(arr,i,k)+solve(arr,k+1,j)+arr[i-1]*arr[k]*arr[j];
          ans = min(ans,tempans);
        }
        return ans;
    }
};

Time 2^N, Space=N

Memoization:

class Solution{
public:
    int solve(int arr[] , int i, int j,vector<vector<int>>&dp){
        if(i>=j) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        int ans = INT_MAX;
        for(int k=i; k<=j-1;k++){
          int tempans = solve(arr,i,k,dp)+solve(arr,k+1,j,dp)+arr[i-1]*arr[k]*arr[j];
          ans= min(ans,tempans);
        }
        return dp[i][j] = ans;
    }
    int matrixMultiplication(int N, int arr[])
    {
        // code here
        int i=1, j=N-1;
        vector<vector<int>>dp(102,vector<int>(102,-1));
        
        return solve(arr,i,j,dp);
    }
};
TIME = N^3 Space N^2
