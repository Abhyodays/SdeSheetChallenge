recursive code:

class Solution{
public:
    
    bool isPalindrome(string str, int i , int j){
        while(i<j){
            if(str[i]!= str[j]) return false;
            i++;
            j--;
        }
        return true;
    }
    int solve(string str, int i, int j){
        if(i>=j) return 0;
        if(isPalindrome(str,i,j)) return 0;
        
        int ans = INT_MAX;
        for(int k=i;k<=j-1;k++){
            int tempans = solve(str,i,k)+solve(str,k+1,j)+1;
            ans = min(tempans,ans);
        }
        return ans;
        
    }
    int palindromicPartition(string str)
    {
        // code here
        int i=0, j = str.length()-1;
        return solve(str,i,j);
        
    }
};

memoized code:

class Solution{
public:
    
    bool isPalindrome(string str, int i , int j){
        while(i<j){
            if(str[i]!= str[j]) return false;
            i++;
            j--;
        }
        return true;
    }
    int solve(string str, int i, int j,vector<vector<int>>&dp){
        if(i>=j||isPalindrome(str,i,j)) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        
        int ans = INT_MAX;
        for(int k=i;k<=j-1;k++){
            int tempans = solve(str,i,k,dp)+solve(str,k+1,j,dp)+1;
            ans = min(tempans,ans);
        }
        return dp[i][j]= ans;
        
    }
    int palindromicPartition(string str)
    {
        // code here
        int n = str.length();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        int i=0, j = n-1;
        return solve(str,i,j,dp);
        
    }
};

Optimal Code(Memoized):


class Solution{
public:
    
    bool isPalindrome(string str, int i , int j){
        while(i<j){
            if(str[i]!= str[j]) return false;
            i++;
            j--;
        }
        return true;
    }
    int solve(string str, int i, int j,vector<vector<int>>&dp){
        if(i>=j||isPalindrome(str,i,j)) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        int ans = INT_MAX;
        for(int k=i;k<=j-1;k++){
            int left=0,right=0;
            if(dp[i][k]!= -1) left = dp[i][k];
            else left = dp[i][k] = solve(str,i,k,dp);
            if(dp[k+1][j]!= -1) right = dp[k+1][j];
            else right = dp[k+1][j] = solve(str,k+1,j,dp);
            int tempans = left+right+1;
            ans = min(tempans,ans);
        }
        return dp[i][j]= ans;
        
    }
    int palindromicPartition(string str)
    {
        // code here
        int n = str.length();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        int i=0, j = n-1;
        return solve(str,i,j,dp);
        
    }
};
