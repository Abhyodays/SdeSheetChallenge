class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(int i=0;i<n;i++) sum+=nums[i];
        if(sum&1) return false; //if sum is odd it can't be divided into two equal parts.
        // now if there is any subset whose sum is half of total sum then answer is true.
        //now problem is subset sum with target of sum/2
        int target = sum/2;
        
        vector<vector<bool>>dp(n+1,vector<bool>(target+1));
        
        for(int i=0;i<=n;i++){
            dp[i][0] = true;
        }
        for(int j=1;j<=target;j++){
            dp[0][j] = false;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=target;j++){
                if(nums[i-1]<=j){
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i-1]];
                }
                else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][target];
    }
};

time = N*sum, space = N*sum
