Dynamic Programming:

class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int m = str1.length(), n = str2.length();
        //filling table for  LCS
        vector<vector<int>>dp(m+1,vector<int>(n+1));
        for(int i=0;i<=m;i++){
            dp[i][0] = 0;
        }
        for(int j=0;j<=n;j++){
            dp[0][j]= 0;
        }
        
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(str1[i-1]==str2[j-1]){
                    dp[i][j] = 1+dp[i-1][j-1];
                }
                else{
                    dp[i][j] = max(dp[i][j-1],dp[i-1][j]);
                }
            }
        }
        
        int i = m, j = n;
        string res = "";
        while(i>0 && j>0){
            //include common character single time.
            if(str1[i-1]==str2[j-1]){
                res = str1[i-1]+res;
                i--;
                j--;
            }
            //here we skip the rows so include the element in row.
            else if(dp[i-1][j]>dp[i][j-1]){
                res = str1[i-1]+res;
                i--;
            }
            //here we include the element of column.
            else{
                res = str2[j-1]+res;
                j--;
            }
        }
        //when rows are still remain
        while(i>0){
            res = str1[i-1]+res;
            i--;
        }
        //when columns are still remain
        while(j>0){
            res = str2[j-1]+res;
            j--;
        }
        
        return res;
        
    }
};
