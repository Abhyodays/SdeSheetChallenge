class Solution{

  public:
  // Recursive method.
    int solve(int n, int diff, int arr[], int total){
        if(diff ==0) return total;  //total is minimum difference between two partition here
        if(n==0){
            int s1 = diff;
            int s2 = total-diff;
            return abs(s1-s2);
        }
        
        return min(solve(n-1,diff-arr[n-1],arr,total),solve(n-1,diff,arr,total));
    }
    int minDifference(int arr[], int n)  { 
      int sum = 0;
	    for(int i=0;i<n;i++) sum+=arr[i];
      return solve(n,sum,arr,sum);
      }
 Time = 2^N, space = N,
    
    
// Dynamic Programming method.

	int minDifference(int arr[], int n)  { 
	    // Your code goes here
	    int sum = 0;
	    for(int i=0;i<n;i++) sum+=arr[i];
	    
	    int dp[n+1][sum+1];
	    for(int i=0;i<=n;i++){
	        dp[i][0] = sum;
	    }
	    for(int j=0;j<=sum;j++){
	        dp[0][j] = abs(j-(sum-j));
	    }
	    
	    for(int i=1;i<=n;i++){
	        for(int j=1;j<=sum;j++){
	            if(arr[i-1]<=j){
	                dp[i][j] = min(dp[i-1][j-arr[i-1]],dp[i-1][j]);
	            }
	            else{
	                dp[i][j] = dp[i-1][j];
	            }
	        }
	    }
	    return dp[n][sum];
	} 
};

Time = n*sum , space = n*sum;

