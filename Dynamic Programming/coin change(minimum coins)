method 1 (Recursive)

class Solution {
public:
    int solve(int n, int amount, vector<int>&coins){
        int res = -1;
        if(n<=0 || amount<=0){
            if(amount==0) return 0;
            return INT_MAX-1;
        }
        
        if(coins[n-1]>amount){
            res = solve(n-1,amount,coins);
            return res;
        }
        else{
            res = min(solve(n,amount-coins[n-1],coins)+1,solve(n-1,amount,coins));
            return res;
        }
    }
    int coinChange(vector<int>& coins, int amount) {
        int res = solve(coins.size(), amount, coins);
        return (res==INT_MAX-1? -1: res);
    }
};

Time = 2^n , Space = N;

method-2 (Memoization): 

class Solution {
public:
    int solve(int n, int amount, vector<int>&coins, vector<vector<int>>&dp){
        int res = -1;
        if(n<=0 || amount<=0){
            if(amount==0) return 0;
            return INT_MAX-1;
        }
        if(dp[n][amount]!= -1) return dp[n][amount];
        
        if(coins[n-1]>amount){
            dp[n][amount] = solve(n-1,amount,coins,dp);
            return dp[n][amount];
        }
        else{
            dp[n][amount] = min(solve(n,amount-coins[n-1],coins,dp)+1,solve(n-1,amount,coins,dp));
            return dp[n][amount];
        }
    }
    int coinChange(vector<int>& coins, int amount) {
        vector<vector<int>>dp(coins.size()+1, vector<int>(amount+1, -1));
        int res = solve(coins.size(), amount, coins,dp);
        return (res==INT_MAX-1? -1: res);
    }
};
Time: n^2, Space = N^2;

Method-3 (Dynamic Programming):

int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>>dp(n+1, vector<int>(amount+1));
        for(int i=0;i<=n; i++){
            for(int j=0; j<=amount; j++){
                if(i==0){
                    dp[i][j] = INT_MAX-1;
                }
                if(j==0){
                    dp[i][j] = 0;
                }
            }
        }
        
        for(int i=1; i<=n;i++){
            for(int j=1; j<=amount; j++){
                if(coins[i-1]<=j){
                    dp[i][j] = min(dp[i][j-coins[i-1]]+1,dp[i-1][j]);
                }
                else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return (dp[n][amount]==INT_MAX-1?-1:dp[n][amount]);
        
    }
    Time = N*amount Space = N*amount
